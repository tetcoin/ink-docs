(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{104:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return u}));var r=n(2),a=n(6),i=(n(0),n(110)),o={title:"Contract Testing",slug:"/basics/contract-testing"},c={unversionedId:"basics/testing",id:"basics/testing",isDocsHomePage:!1,title:"Contract Testing",description:"Unit Tests",source:"@site/docs/basics/testing.md",slug:"/basics/contract-testing",permalink:"/pro-docs/basics/contract-testing",editUrl:"https://github.com/pro-docs/edit/master/docs/basics/testing.md",version:"current",sidebar:"reference",previous:{title:"Cross-Contract Calling",permalink:"/pro-docs/basics/cross-contract-calling"},next:{title:"Environment Functions",permalink:"/pro-docs/basics/environment-functions"}},s=[{value:"Unit Tests",id:"unit-tests",children:[]},{value:"Off-chain Testing",id:"off-chain-testing",children:[]},{value:"How do you find out if your test requires the off-chain environment?",id:"how-do-you-find-out-if-your-test-requires-the-off-chain-environment",children:[]},{value:"Example",id:"example",children:[]},{value:"On-chain Testing",id:"on-chain-testing",children:[]}],l={rightToc:s};function u(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"unit-tests"},"Unit Tests"),Object(i.b)("p",null,"Testing contracts off-chain is done by ",Object(i.b)("inlineCode",{parentName:"p"},"cargo test")," and users can simply use the standard routines\nof creating unit test modules within the pro! project:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-rust"}),"#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn my_test() { ... }\n}\n")),Object(i.b)("p",null,"Test instances of contracts can be created with something like:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-rust"}),"let contract = MyContract::my_constructor(a, b);\n")),Object(i.b)("p",null,"Messages can simply be called on the returned instance as if ",Object(i.b)("inlineCode",{parentName:"p"},"MyContract::my_constructor")," returns a\n",Object(i.b)("inlineCode",{parentName:"p"},"Self")," instance."),Object(i.b)("p",null,"See the ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/paritytech/ink/blob/master/examples/flipper/src/lib.rs"}),"flipper example"),"."),Object(i.b)("h2",{id:"off-chain-testing"},"Off-chain Testing"),Object(i.b)("p",null,"pro! smart contracts can compile in several different modes.\nThere are two main compilation models using either"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"on-chain mode: ",Object(i.b)("inlineCode",{parentName:"li"},"no_std")," + WebAssembly as target"),Object(i.b)("li",{parentName:"ul"},"off-chain mode: ",Object(i.b)("inlineCode",{parentName:"li"},"std"))),Object(i.b)("p",null,"We generally use the on-chain mode for actual smart contract deployment\nwhereas we use the off-chain mode for smart contract testing using the\noff-chain environment provided by the ",Object(i.b)("inlineCode",{parentName:"p"},"ink_env")," crate."),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"#[ink::test]")," proc. macro enables more elaborate off-chain testing."),Object(i.b)("p",null,"If you annotate a test with this attribute it will be executed in a simulated\nenvironment, similar to as it would be run on-chain.\nYou then have fine-grained control over how a contract is called;\nfor example you can influence the block advancement, the value transferred to it,\nby which account it is called, which storage it is run with, etc.."),Object(i.b)("p",null,"See the ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/paritytech/ink/blob/master/examples/erc20/lib.rs#L278-L280"}),Object(i.b)("inlineCode",{parentName:"a"},"examples/erc20"))," contract on how to utilize those or ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://paritytech.github.io/ink/ink_lang/attr.test.html"}),"the documentation")," for details."),Object(i.b)("p",null,"At the moment there are some known limitations to our off-chain environment and we are working\non making it behave as close to the real chain environment as possible."),Object(i.b)("p",null,"Defines a unit test that makes use of pro!'s off-chain testing capabilities."),Object(i.b)("p",null,"If your unit test does not require the existence of an off-chain environment\nit is fine to not use this macro since it bears some overhead with the test."),Object(i.b)("p",null,"Note that this macro is not required to run unit tests that require pro!'s\noff-chain testing capabilities but merely improves code readability."),Object(i.b)("h2",{id:"how-do-you-find-out-if-your-test-requires-the-off-chain-environment"},"How do you find out if your test requires the off-chain environment?"),Object(i.b)("p",null,"Normally if the test recursively uses or invokes some contract methods that\ncall a method defined in ",Object(i.b)("inlineCode",{parentName:"p"},"self.env()")," or ",Object(i.b)("inlineCode",{parentName:"p"},"Self::env()"),"."),Object(i.b)("p",null,"An examples is the following:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-rust"}),"let caller: AccountId = self.env().caller();\n")),Object(i.b)("h2",{id:"example"},"Example"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-rust"}),"use ink_lang as ink;\n\n#[cfg(test)]\nmod tests {\n    // Conventional unit test that works with assertions.\n    #[ink::test]\n    fn test1() {\n        // test code comes here as usual\n    }\n\n    // Conventional unit test that returns some Result.\n    // The test code can make use of operator-`?`.\n    #[ink::test]\n    fn test2() -> Result<(), ink_env::Error> {\n        // test code that returns a Rust Result type\n    }\n}\n")),Object(i.b)("h2",{id:"on-chain-testing"},"On-chain Testing"),Object(i.b)("p",null,"The easiest way to do on-chain testing is to\n",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"/getting-started/running-substrate"}),"run a local substrate node"),",\ndeploy your contract there and interact with it."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-rust"}),'use ink_lang as ink;\n\n#[ink::contract]\nmod greeter {\n    #[ink(storage)]\n    pub struct Greeter;\n\n    impl Greeter {\n        #[ink(constructor)]\n        pub fn new() -> Self {\n            let caller = Self::env().caller();\n            let message = format!("thanks for instantiation {:?}", caller);\n            ink_env::debug_println(&message);\n            Greeter {}\n        }\n\n        #[ink(message, payable)]\n        pub fn fund(&mut self) {\n            let caller = self.env().caller();\n            let value = self.env().transferred_balance();\n            let message = format!("thanks for the funding of {:?} from {:?}", value, caller);\n            ink_env::debug_println(&message);\n        }\n    }\n}\n')))}u.isMDXComponent=!0},110:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return f}));var r=n(0),a=n.n(r);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=a.a.createContext({}),u=function(e){var t=a.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},b=function(e){var t=u(e.components);return a.a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},m=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),b=u(n),m=r,f=b["".concat(o,".").concat(m)]||b[m]||p[m]||i;return n?a.a.createElement(f,c(c({ref:t},l),{},{components:n})):a.a.createElement(f,c({ref:t},l))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:r,o[1]=c;for(var l=2;l<i;l++)o[l]=n[l];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);