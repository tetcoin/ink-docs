(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{110:function(e,t,r){"use strict";r.d(t,"a",(function(){return p})),r.d(t,"b",(function(){return b}));var n=r(0),o=r.n(n);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var u=o.a.createContext({}),l=function(e){var t=o.a.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):c(c({},t),e)),r},p=function(e){var t=l(e.components);return o.a.createElement(u.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},m=o.a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=l(r),m=n,b=p["".concat(i,".").concat(m)]||p[m]||d[m]||a;return r?o.a.createElement(b,c(c({ref:t},u),{},{components:r})):o.a.createElement(b,c({ref:t},u))}));function b(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,i=new Array(a);i[0]=m;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:n,i[1]=c;for(var u=2;u<a;u++)i[u]=r[u];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},67:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return i})),r.d(t,"metadata",(function(){return c})),r.d(t,"rightToc",(function(){return s})),r.d(t,"default",(function(){return l}));var n=r(2),o=r(6),a=(r(0),r(110)),i={title:"Opt out of Storage",slug:"/datastructures/opting-out"},c={unversionedId:"datastructures/opting-out",id:"datastructures/opting-out",isDocsHomePage:!1,title:"Opt out of Storage",description:"If you are in need of storing some temporary information across method and message boundaries pro! will have your back with the ink_storage::Memory abstraction. It allows you to simply opt-out of using the storage for the wrapped entity at all and thus is very similar to Solidity's very own memory annotation.",source:"@site/docs/datastructures/opting-out.md",slug:"/datastructures/opting-out",permalink:"/pro-docs/datastructures/opting-out",editUrl:"https://github.com/pro-docs/edit/master/docs/datastructures/opting-out.md",version:"current",sidebar:"reference",previous:{title:"Spread vs. Packed",permalink:"/pro-docs/datastructures/spread-packed-layout"},next:{title:"Dynamic Storage Allocator",permalink:"/pro-docs/datastructures/dynamic-allocation"}},s=[],u={rightToc:s};function l(e){var t=e.components,r=Object(o.a)(e,["components"]);return Object(a.b)("wrapper",Object(n.a)({},u,r,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"If you are in need of storing some temporary information across method and message boundaries pro! will have your back with the ",Object(a.b)("inlineCode",{parentName:"p"},"ink_storage::Memory")," abstraction. It allows you to simply opt-out of using the storage for the wrapped entity at all and thus is very similar to Solidity's very own ",Object(a.b)("inlineCode",{parentName:"p"},"memory")," annotation."),Object(a.b)("p",null,"An example below:"),Object(a.b)("pre",null,Object(a.b)("code",Object(n.a)({parentName:"pre"},{className:"language-rust"}),"#[ink(storage)]\npub struct OptedOut {\n    a: i32,\n    b: ink_storage::Lazy<i32>,\n    c: ink_storage::Memory<i32>,\n}\n")),Object(a.b)("p",null,"The the above example ",Object(a.b)("inlineCode",{parentName:"p"},"a")," and ",Object(a.b)("inlineCode",{parentName:"p"},"b")," are normal storage entities, however, ",Object(a.b)("inlineCode",{parentName:"p"},"c")," on the other hand side will never load from or store to contract storage and will always be reset to the default value of its ",Object(a.b)("inlineCode",{parentName:"p"},"i32")," type for every contract call.\nIt can be accessed from all pro! messages or methods via ",Object(a.b)("inlineCode",{parentName:"p"},"self.c"),", but will never manipulate the contract storage and thus acts wonderfully as some shared local information."))}l.isMDXComponent=!0}}]);